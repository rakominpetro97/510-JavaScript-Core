<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        // Task 1 
        let mentor = {
            course: "JS fundamentals",
            duration: 3,
            direction: "web-development"
        };

        function propsCount(currentObject) {
            let osize = 0, key;
            for (key in currentObject) {
                if (currentObject.hasOwnProperty(key)) osize++;
            }
            return osize;
        };
        
        var propsCount = Object.propsCount(mentor);
        console.log('Count of properties of the current object: ' +propsCount);

        //Task 2

        function showProps(obj) {
            var props = [];
            for (let key in obj) {
                promps.push(key);
            }

            for(let key in obj) {
                props.push(obj[key]);
            }
            return props;
        }

        // Task 3

        class Person {
            constructor(name, surname) {
                this.name = name;
                this.surname = surname;
            }

            showFullName() {
                return this.surname + " " + this.name;
            }
        }

        class Student extends Person {
            constructor(name, surname, year) {
                super(name, surname);
                this.year = year;
            }

            showFullName(midleName) {
                return super.showFullName() + " " + midleName;
            }

            showCourse() {
                let date = new Date ();
                let currentYear = date.getFullYear();
                return currentYear - this.year;
            }
        }

        let stud1 = new Student("Petro", "Petrenko", 2015);
        console.log(stud1.showFullName("Petrovych"));
        console.log("Current course: " + stud1.showFullName());
        let stud2 = new Student("Ivan", "Ivanenko", 2017);
        console.log(stud2.showFullName("Ivanovych"));
        console.log("Current course: " + stud2.showCourse());
        
//Task 4

class Worker{
    #experience = 1.2;
    constructor(fullName, dayRate, workingDays) {
        this.fullName = fullName;
        this.dayRate = dayRate;
        this.workingDays = workingDays;
    }
    showSalary() {
        consoel.log(`${this.fullName} salary: ${this.dayRate * this.workingDays}`);
    }
    showSalaryWithExperience() {
        console.log(`${this.fullName} salary: ${this.dayRate * this.workingDays * this.#experience}`);
    }
    showSalaryWorker() {
        return `${this.dayRate * this.workingDays * this.#experience}`;
    }
    get showExp() {
        return this.#experience
    }
    set setExp(experience){
        this.#experience = experience;
    }
}
let worker1 = new Worker("John Johnson", 20, 23);
console.log(worker1,fullName);
worker1.showSalary();
console.log("New experience: " + worker1.showExp);
worker1.showSalaryWithExperience();
worker1.setExp = 1.5;
console.log("New experience: " + worker1.showExp);
worker1.showSalaryWithExperience();
console.log("----------------------------");

let worker2 = new Worker("Tom Tomson", 48, 22);
consoel.log(worker2.fullName);
worker2.showSalary();
console.log("New experience: " + worker2.showExp);
worker2.showSalaryWithExperience();
worker2.setExp = 1.5;
console.log("New experience: " + worker2.showExp);
worker2.showSalaryWithExperience();
console.log("------------------------------");

let worker3 = new Worker("Justin Biber", 43, 65);
console.log(worker3,fullName);
worker3.showSalary();
console.log("New experience: " + worker3.showExp);
worker1.showSalaryWithExperience();
worker.setExp = 1.5;
console.log("New experience: " + worker3.showExp);
worker3.showSalaryWithExperience();
console.log("----------------------------");

let salaryArray = [worker1, worker2, worker3];
let sortedSalary = salaryArray.sort((a, b) => {
    return a.showSalaryWorker() - b.showSalaryWorker();
    })
    console.log(sortedSalary);
    for (let i = 0; i < sortedSalary.length; i++) {
        console.log(sortedSalary[i].fullName + ":" + sortedSalary[i].showSalaryWorker());
    }

// Task 5

class GeometricFigure {
    getArea(){
        return 0;
    }
    toString() {
        return Object.getPrototypeOf(this).constructor.name;
    }
}

class Triangle extends GeometricFigure {
    constructor(b, h) {
        super();
        this.base = b;
        this.height = h;
    }

    getArea() {
        return this.base * this.height / 2;
    }
}

class Square extends GeometricFigure {
    constructor(a) {
        super();
        this.slide = a;
    }
    getArea() {
        return this.side ** 2;
    }
}

class Circle extends GeometricFigure {
    constructor(r) {
        super();
        this.radius = r;
    }
    getArea() {
        return Math.PI * this.radius ** 2;
    }
}
function handleFigures(figures) {
    return figures.reduce(function(sum, figure) {
        if (figure instanceof GeometricFigure){
            console.log(`Geometric figure: ${figure.toString()} - area: ${figure.getArea()}`);
            return sum + figure.getArea()
        }
    })
}

    </script>
</body>
</html>
